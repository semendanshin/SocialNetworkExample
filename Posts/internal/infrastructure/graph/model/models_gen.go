// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"

	"github.com/google/uuid"
)

type Comment struct {
	ID        uuid.UUID  `json:"id"`
	PostID    uuid.UUID  `json:"postId"`
	ParentID  *uuid.UUID `json:"parentId,omitempty"`
	Content   string     `json:"content"`
	AuthorID  uuid.UUID  `json:"authorId"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	Author    *User      `json:"author,omitempty"`
	Post      *Post      `json:"post,omitempty"`
	Parent    *Comment   `json:"parent,omitempty"`
	Children  []*Comment `json:"children,omitempty"`
}

type Mutation struct {
}

type NewComment struct {
	PostID   uuid.UUID  `json:"postId"`
	ParentID *uuid.UUID `json:"parentId,omitempty"`
	Content  string     `json:"content"`
	AuthorID uuid.UUID  `json:"authorId"`
}

type NewPost struct {
	Title         string    `json:"title"`
	Content       string    `json:"content"`
	AuthorID      uuid.UUID `json:"authorId"`
	AllowComments *bool     `json:"allowComments,omitempty"`
}

type NewUser struct {
	Name string `json:"name"`
}

type Post struct {
	ID            uuid.UUID  `json:"id"`
	Title         string     `json:"title"`
	Content       string     `json:"content"`
	AuthorID      uuid.UUID  `json:"authorId"`
	AllowComments bool       `json:"allowComments"`
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	Comments      []*Comment `json:"comments"`
	Author        *User      `json:"author"`
}

type Query struct {
}

type Subscription struct {
}

type User struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Posts []*Post   `json:"posts,omitempty"`
}
