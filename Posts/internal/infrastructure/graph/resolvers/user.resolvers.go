package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"Posts/internal/infrastructure/graph"
	"Posts/internal/infrastructure/graph/model"
	"Posts/internal/utils/mappers"
	"context"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	usr := mappers.CreateDTOToDomainUser(&input)

	err := r.uuc.Create(ctx, usr)
	if err != nil {
		return nil, err
	}

	return mappers.DomainToModelUser(usr), nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uuid.UUID) (*model.User, error) {
	usr, err := r.uuc.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}

	return mappers.DomainToModelUser(usr), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, limit *int, offset *int) ([]*model.User, error) {
	users, err := r.uuc.GetAll(ctx, *limit, *offset)
	if err != nil {
		return nil, err
	}

	var modelUsers []*model.User
	for _, user := range users {
		modelUsers = append(modelUsers, mappers.DomainToModelUser(user))
	}

	return modelUsers, nil
}

// Posts is the resolver for the posts field.
func (r *userResolver) Posts(ctx context.Context, obj *model.User, limit *int, offset *int) ([]*model.Post, error) {
	posts, err := r.puc.GetByAuthorID(ctx, obj.ID, *limit, *offset)
	if err != nil {
		return nil, err
	}

	var modelPosts []*model.Post
	for _, post := range posts {
		modelPosts = append(modelPosts, mappers.DomainToModelPost(post))
	}

	return modelPosts, nil
}

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
